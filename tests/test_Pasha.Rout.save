
R Under development (unstable) (2016-03-15 r70334) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(Pasha)
Loading required package: parallel
Loading required package: GenomicAlignments
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colnames, do.call, duplicated, eval, evalq,
    get, grep, grepl, intersect, is.unsorted, lapply, lengths, mapply,
    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank,
    rbind, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unsplit

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:base':

    colMeans, colSums, expand.grid, rowMeans, rowSums

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: SummarizedExperiment
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: Biostrings
Loading required package: XVector
Loading required package: Rsamtools
> 
> ###########################################
> ## 1. Classic tests for the class
> ###########################################
> 
> # Get the BAM file used in RSamTools as example
> BAMfile <- system.file("extdata","ex1.bam",package="Rsamtools")
> # Testing the public constructor of AlignedData class (from Pasha)
> alignedDataObject <- readAlignedData(folderName="" ,
+                                      fileName=BAMfile, 
+                                      fileType="BAM", 
+                                      pairedEnds=T)
> print(alignedDataObject)
AlignedData object
3242 alignments declared as paired-ends
Inserts size : variable...
 (53.8,91.8] -> 1
 (91.8,130] -> 0
 (130,167] -> 0
 (167,205] -> 642
 (205,243] -> 913
Reads size : variable...
 (33,34.4] -> 43
 (34.4,35.8] -> 2804
 (35.8,37.2] -> 283
 (37.2,38.6] -> 0
 (38.6,40] -> 112
Alignment quality scores : 
 (-0.099,19.8] -> 47
 (19.8,39.6] -> 32
 (39.6,59.4] -> 37
 (59.4,79.2] -> 276
 (79.2,99.1] -> 2850
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : seq1 - seq2
Warning message:
In .summarizeAlignedData(object, noWarning = FALSE) :
  Some aligned reads in AlignedData object did not have any insert size declared, orphan reads and pairs consistency should be checked properly (see 'getOrphansIndexes' and 'checkPairsOK' methods)...
>                              
> # Rename the chromosomes from seqX to chrX
> alignedDataObject <- normalizeChrNames(alignedDataObject,
+                                        chrPrefix="seq",
+                                        chrSuffix="")
> print(alignedDataObject)
AlignedData object
3242 alignments declared as paired-ends
Inserts size : variable...
 (53.8,91.8] -> 1
 (91.8,130] -> 0
 (130,167] -> 0
 (167,205] -> 642
 (205,243] -> 913
Reads size : variable...
 (33,34.4] -> 43
 (34.4,35.8] -> 2804
 (35.8,37.2] -> 283
 (37.2,38.6] -> 0
 (38.6,40] -> 112
Alignment quality scores : 
 (-0.099,19.8] -> 47
 (19.8,39.6] -> 32
 (39.6,59.4] -> 37
 (59.4,79.2] -> 276
 (79.2,99.1] -> 2850
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : chr1 - chr2
Warning message:
In .summarizeAlignedData(object, noWarning = FALSE) :
  Some aligned reads in AlignedData object did not have any insert size declared, orphan reads and pairs consistency should be checked properly (see 'getOrphansIndexes' and 'checkPairsOK' methods)...
>                                
>                                
> #### Splitting object (indirect use of '[') 
> # Split the object and the associated data by chromosomes 
> splitListalignedDataObject <- split(alignedDataObject, 
+                                     seqnames(alignedDataObject))
> # check that the object has correctly been split
> print(names(splitListalignedDataObject))
[1] "chr1" "chr2"
> print(sapply(lapply(splitListalignedDataObject, seqnames), unique))
chr1 chr2 
chr1 chr2 
Levels: chr1 chr2
> 
> 
> #### Orphans and pairs consistency
> print(length(alignedDataObject))
[1] 3242
> # Identify the reads with no mate and remove them
> orphansReadsIndex <- getOrphansIndexes(alignedDataObject)
> print(paste("Nb of orphan reads :", sum(orphansReadsIndex)))
[1] "Nb of orphan reads : 156"
> alignedDataObject <- alignedDataObject[!orphansReadsIndex]
> print(length(alignedDataObject))
[1] 3086
> 
> # Check that pairs are correctly represented in the object
> # ie. mate pairs are consecutive
> print(checkPairsOK(alignedDataObject))

 Checking pairs consistency
     OK
 Check that sorting seems ok...
     OK[1] TRUE
> # Sort by pairs
> alignedDataObject <- sortByPairs(alignedDataObject, quiet=FALSE)

 Sorting aligned data by pairs> # Check pairs consistency again
> print(checkPairsOK(alignedDataObject))

 Checking pairs consistency
     OK
 Check that sorting seems ok...
     OK[1] TRUE
> 
> 
> #### Filtering
> 
> ## Chromosome patterns
> # (filter reads on chromosomes containing the character '1')
> print(alignedDataObject)
AlignedData object
3086 alignments declared as paired-ends
Inserts size : variable...
 (53.8,91.8] -> 1
 (91.8,130] -> 0
 (130,167] -> 0
 (167,205] -> 633
 (205,243] -> 909
Reads size : variable...
 (33,34.4] -> 39
 (34.4,35.8] -> 2669
 (35.8,37.2] -> 270
 (37.2,38.6] -> 0
 (38.6,40] -> 108
Alignment quality scores : 
 (-0.099,19.8] -> 17
 (19.8,39.6] -> 26
 (39.6,59.4] -> 28
 (59.4,79.2] -> 205
 (79.2,99.1] -> 2810
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : chr1 - chr2
> resultFiltering <- dropChromosomePattern(alignedDataObject, 
+                                            pattern="1")
> print(resultFiltering)
AlignedData object
1648 alignments declared as paired-ends
Inserts size : variable...
 (173,187] -> 25
 (187,201] -> 222
 (201,215] -> 312
 (215,229] -> 208
 (229,243] -> 57
Reads size : variable...
 (33,34.4] -> 16
 (34.4,35.8] -> 1420
 (35.8,37.2] -> 144
 (37.2,38.6] -> 0
 (38.6,40] -> 68
Alignment quality scores : 
 (-0.099,19.8] -> 11
 (19.8,39.6] -> 13
 (39.6,59.4] -> 26
 (59.4,79.2] -> 166
 (79.2,99.1] -> 1432
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : chr2
> 
> ## Range of insert size
> print(table(isize(alignedDataObject)))

-243 -242 -241 -240 -239 -238 -237 -236 -235 -234 -233 -232 -231 -230 -229 -228 
   1    3    4    1    3    3    4    6    8    8   15   12   14   14   13   22 
-227 -226 -225 -224 -223 -222 -221 -220 -219 -218 -217 -216 -215 -214 -213 -212 
  23   26   23   27   26   33   30   32   33   31   40   26   50   36   47   47 
-211 -210 -209 -208 -207 -206 -205 -204 -203 -202 -201 -200 -199 -198 -197 -196 
  42   42   46   42   38   38   32   33   46   42   45   36   47   35   26   39 
-195 -194 -193 -192 -191 -190 -189 -188 -187 -186 -185 -184 -183 -182 -181 -180 
  33   31   33   24   27   21   15   10   11    5   10    5    3    7    2    2 
-179 -178 -177 -175 -174 -173 -170  -54   54  170  173  174  175  177  178  179 
   3    2    2    1    1    3    1    1    1    1    3    1    1    2    2    3 
 180  181  182  183  184  185  186  187  188  189  190  191  192  193  194  195 
   2    2    7    3    5   10    5   11   10   15   21   27   24   33   31   33 
 196  197  198  199  200  201  202  203  204  205  206  207  208  209  210  211 
  39   26   35   47   36   45   42   46   33   32   38   38   42   46   42   42 
 212  213  214  215  216  217  218  219  220  221  222  223  224  225  226  227 
  47   47   36   50   26   40   31   33   32   30   33   26   27   23   26   23 
 228  229  230  231  232  233  234  235  236  237  238  239  240  241  242  243 
  22   13   14   14   12   15    8    8    6    4    3    3    1    4    3    1 
> resultFiltering <- filterInsertSize(alignedDataObject, 
+                                     rangeMin=190, 
+                                     rangeMax=195)
> print(table(isize(resultFiltering)))

-195 -194 -193 -192 -191  191  192  193  194  195 
  33   31   33   24   27   27   24   33   31   33 
> print(resultFiltering)
AlignedData object
296 alignments declared as paired-ends
Inserts size : variable...
 (191,191.8] -> 27
 (191.8,192.6] -> 24
 (192.6,193.4] -> 33
 (193.4,194.2] -> 31
 (194.2,195] -> 33
Reads size : variable...
 (34,35.2] -> 256
 (35.2,36.4] -> 26
 (36.4,37.6] -> 0
 (37.6,38.8] -> 0
 (38.8,40] -> 14
Alignment quality scores : 
 (9.91,27.8] -> 5
 (27.8,45.6] -> 4
 (45.6,63.4] -> 4
 (63.4,81.2] -> 30
 (81.2,99.1] -> 253
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : chr1 - chr2
> 
> ## Reads sequence size
> print(table(qwidth(alignedDataObject)))

  33   34   35   36   40 
   4   35 2669  270  108 
> resultFiltering <- filterReadSize(alignedDataObject, 
+                                   rangeMin=35, 
+                                   rangeMax=50)
> print(table(qwidth(resultFiltering)))

 36  40 
270 108 
> print(resultFiltering)
AlignedData object
378 alignments declared as paired-ends
Inserts size : variable...
 (173,187] -> 4
 (187,200] -> 51
 (200,214] -> 68
 (214,227] -> 52
 (227,241] -> 14
Reads size : variable...
 (36,36.8] -> 270
 (36.8,37.6] -> 0
 (37.6,38.4] -> 0
 (38.4,39.2] -> 0
 (39.2,40] -> 108
Alignment quality scores : 
 (9.91,27.8] -> 3
 (27.8,45.6] -> 5
 (45.6,63.4] -> 6
 (63.4,81.2] -> 24
 (81.2,99.1] -> 340
36 reads were reported as not aligned to reference
Chromosomes (seqnames) covered by at least a read : chr1 - chr2
>                           
> ## Reads with atypic characteristics for chromatin alignments
> # Mate unmapped flag set, or mates aligned on same strand
> resultFiltering <- cleanNonSimplePairs(alignedDataObject)
> # Reads with a strand value different from expected '+' or '-'
> resultFiltering <- dropUndefinedStrand(resultFiltering, quiet=FALSE)
> 
> 
> 
> 
> ###########################################
> ## 2. Launch Pasha package functional testing (regular test, a complete one can be started later manually by user, but is time consuming)
> ###########################################
> 
> Pasha:::.testFunctional(tempdir(), testType="regular", verbose=FALSE)


####################################
Functional test of Pasha - regular - 
####################################

Preparing folders and copying files for tests...Done !

Starting the results generation (silent output, see log file for details), this step can be long...Done !

Comparing the resulting files with precomputed ones...

Number of results files generated : 24 

Number of successful comparison (md5sum) with precomputed files : 24/24

Done, all results seem consistent with reference

> 
> ###########################################
> ## 3. Launch Pasha package functional multiread testing 
> ###########################################
> 
> Pasha:::.testFunctionalMultiread(tempdir(), verbose=FALSE)


################################################
Functional test of Pasha (Multiread) - regular - 
################################################

Preparing folders and copying files for tests...Done !

Starting the results generation (silent output, see log file for details), this step can be long...Done !

Comparing the resulting files with precomputed ones...

Number of results files generated : 3 

Number of successful comparison (md5sum) with precomputed files : 3/3

Done, all results seem consistent with reference

> 
> proc.time()
   user  system elapsed 
 34.790   4.409  38.647 
